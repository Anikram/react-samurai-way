{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Profile.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Posts/Post/Post.jsx","components/Profile/Posts/PostsReduxForm.jsx","components/Profile/Posts/Posts.jsx","components/Profile/Posts/PostsContainer.jsx","components/Profile/Profile.jsx","redux/selectors/profileSelectors.js","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","deactivateEditMode","e","updateUserStatus","className","s","onDoubleClick","profileId","authorizedUserId","onChange","currentTarget","value","autoFocus","onBlur","onKeyPress","key","ProfileInfo","profile","statusEditable","profileIsFriend","updateProfileOnClick","Preloader","contacts","contactsElements","Object","keys","map","index","contact","profileContent","profileBanner","panel","avatar","src","photos","large","defaultAvatar","alt","nickname","fullName","userId","FollowUnfollow","followed","followingInProgress","unfollowUser","followUser","info","jobSection","openForHiring","jobDescription","lookingForAJobDescription","Post","post","text","message","postUi","likeCounter","likeCount","onClick","addLike","postId","maxLength15","maxLengthValidatorCreator","PostsReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","handleSubmit","newPostText","onSubmit","Field","textarea","name","component","Textarea","validate","required","Posts","React","memo","posts","addPost","addLikeToPost","postElements","p","id","formData","PostsContainer","connect","state","profilePage","Profile","selectUserProfile","getProfileStatus","getAuthorizedUserProfile","auth","isUserAuthorized","isAuth","getIsFriend","isFriend","ProfileContainer","this","setState","match","params","to","getUserProfile","getUserStatus","statusEditableCheck","PureComponent","compose","getFollowingInProgress","friends","friendsPage","updateUserFriends","withRouter","withConnectedAuthRedirect"],"mappings":"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","file":"static/js/4.58c9a272.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContent\":\"ProfileInfo_profileContent__uGti0\",\"profileBanner\":\"ProfileInfo_profileBanner__1HYzL\",\"cover\":\"ProfileInfo_cover__301bp\",\"panel\":\"ProfileInfo_panel__3zj2v\",\"avatar\":\"ProfileInfo_avatar__3xuFq\",\"info\":\"ProfileInfo_info__3dsdE\",\"jobSection\":\"ProfileInfo_jobSection__1cK-E\",\"jobDescription\":\"ProfileInfo_jobDescription__17ahI\",\"status\":\"ProfileInfo_status__2G3BZ\",\"contacts\":\"ProfileInfo_contacts__3y62P\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Posts_textarea__2gBif\",\"posts\":\"Posts_posts__tkALa\",\"addButton\":\"Posts_addButton__2OD-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContent\":\"Profile_profileContent__1eaZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3rcfg\",\"text\":\"Post_text__1cnvX\",\"postUi\":\"Post_postUi__2XhjG\",\"likeCounter\":\"Post_likeCounter__PlvIW\"};","import s from \"./ProfileInfo.module.css\";\nimport React, {useEffect, useState} from \"react\";\n\nconst ProfileStatus = (props) => {\n   let [editMode, setEditMode] = useState(false);\n   let [status, setStatus] = useState(props.status);\n\n   useEffect(() => {\n     setStatus(props.status)\n   }, [props.status])\n\n  const activateEditMode = () => {\n     if (props.profileId === props.authorizedUserId) {\n        setEditMode(true)\n     }\n  }\n\n  const deactivateEditMode = (e) => {\n    setEditMode(false)\n    props.updateUserStatus(status)\n  }\n\n  const deactivateEditModeKeyPressed = (e) => {\n    if (e.key === 'Enter') {\n      deactivateEditMode(e)\n    }\n  }\n\n  const onChangeStatus = (e) => {\n    setStatus(e.currentTarget.value)\n  }\n\n    return (\n      <>\n        {!editMode &&\n        <div className={s.status}>\n          <span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\n        </div>\n        }\n        {editMode &&\n        <div className={s.status}>\n          <input onChange={onChangeStatus} autoFocus={true}  onBlur={deactivateEditMode} onKeyPress={deactivateEditModeKeyPressed} value={status}/>\n        </div>\n        }\n\n      </>\n    )\n};\n\nexport default ProfileStatus;\n","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport defaultAvatar from '../../../assets/images/male-avatar-placeholder.png'\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport {FollowUnfollowButton} from \"../../Common/Buttons/FollowUnfollow\";\n\nconst ProfileInfo = ({\n                       profile,\n                       updateUserStatus,\n                       statusEditable,\n                       status,\n                       profileIsFriend,\n                       authorizedUserId,\n                       updateProfileOnClick,\n                       ...props\n                     }) => {\n  if (!profile) {\n    return <Preloader/>\n  }\n\n  let contacts = profile.contacts;\n  const contactsElements = Object.keys(contacts).map((key, index) => {\n      if (contacts[key]) {\n        return <div className={s.contact} key={index}>{key}: <button>{contacts[key]}</button></div>\n      } else {\n        return <div className={s.contact} key={index}>{key}: </div>\n      }\n    }\n  )\n\n  return (\n    <div className={s.profileContent}>\n      <div className={s.profileBanner}>\n        <div className={s.panel}>\n          <div className={s.avatar}>\n            <img src={profile.photos.large != null ? profile.photos.large : defaultAvatar} alt=''/>\n\n            <div className={s.nickname}>\n              <h5> {profile.fullName} </h5>\n            </div>\n\n            {!(authorizedUserId === profile.userId) ? <FollowUnfollowButton userId={profile.userId}\n                                                                            followed={profileIsFriend}\n                                                                            followingInProgress={props.followingInProgress}\n                                                                            unfollowUser={props.unfollowUser}\n                                                                            followUser={props.followUser}/> :\n              <div></div>\n            }\n\n\n          </div>\n        </div>\n      </div>\n\n      <ProfileStatus status={status} updateUserStatus={updateUserStatus} authorizedUserId={authorizedUserId}\n                     profileId={profile.userId}/>\n\n      <div className={s.info}>\n        <div className={s.contacts}>\n          {contactsElements}\n        </div>\n\n        <div className={s.jobSection}>\n          <div className={s.openForHiring}>I'm open for hiring!</div>\n          <div className={s.jobDescription}>\"{profile.lookingForAJobDescription}\"</div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\n\nexport default ProfileInfo;","import s from './Post.module.css';\nimport React from \"react\";\n\nconst Post = (props) => {\n  let onAddLike = () => {\n    props.addLike(props.postId);\n  }\n\n  return (\n    <div className={s.post}>\n      <img src=\"https://www.kosher.com/resized/open_graph/u/s/user_avatar.png\" alt=\"\"/>\n      <div className={s.text}>{props.message}</div>\n      <div className={s.postUi}>\n        <div className={s.likeCounter}>\n          <span>{props.likeCount}</span>\n        </div>\n\n        <button onClick={onAddLike}>Like</button>\n      </div>\n    </div>\n  )\n};\n\nexport default Post;\n","import React from 'react';\nimport {Field, reduxForm, reset} from \"redux-form\";\nimport s from \"./Posts.module.css\";\nimport {required, maxLengthValidatorCreator} from \"../../../helpers/validators/vlidators\";\nimport {Textarea} from \"../../Common/Forms/FormControls\";\n\nconst maxLength15 = maxLengthValidatorCreator(15);\n\nconst PostsForm = ({handleSubmit, newPostText}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field className={s.textarea} name={'newPostText'} component={Textarea}\n               value={newPostText} validate={[required, maxLength15 ]}/>\n      </div>\n      <div>\n        <button>\n          Add post\n        </button>\n      </div>\n    </form>\n  )\n}\n\nconst afterSubmit = (result, dispatch) => {\n  dispatch(reset('PostsForm'))\n}\n\nconst PostsReduxForm = reduxForm({form: 'PostsForm',onSubmitSuccess: afterSubmit})(PostsForm);\n\nexport default PostsReduxForm;\n","import React from 'react';\nimport s from './Posts.module.css';\nimport Post from \"./Post/Post\";\nimport PostsReduxForm from \"./PostsReduxForm\";\n\nconst Posts = React.memo(({addLike, posts, addPost, ...props }) => {\n  let addLikeToPost = (postId) => {\n    addLike(postId);\n  }\n\n  let postElements =\n    posts.map(p => <Post addLike={addLikeToPost}\n                               message={p.message} key={p.id} postId={p.id - 1}\n                               likeCount={p.likeCount}\n    />);\n\n  let onSubmit = (formData) => {\n    addPost(formData.newPostText);\n  }\n\n  return (\n    <div className={s.posts}>\n      <h3>My posts</h3>\n      <PostsReduxForm onSubmit={onSubmit}/>\n      <div className={s.posts}>\n        {postElements}\n      </div>\n    </div>\n  )\n});\n\nexport default Posts;","import {addLike, addPost} from \"../../../redux/profileReducer\";\nimport Posts from \"./Posts\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  }\n}\n\nconst PostsContainer = connect(mapStateToProps,{\n  addPost,\n  addLike\n})(Posts);\n\nexport default PostsContainer;","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport PostsContainer from \"./Posts/PostsContainer\";\n\nconst Profile = React.memo((props) => {\n  return (\n    <div className={s.profileContent + ' border tile'}>\n      <ProfileInfo profile={props.profile}\n                   status={props.status}\n                   updateUserStatus={props.updateUserStatus}\n                   statusEditable={props.statusEditable}\n                   followUser={props.followUser}\n                   unfollowUser={props.unfollowUser}\n                   followingInProgress={props.followingInProgress}\n                   profileIsFriend={props.profileIsFriend}\n                   authorizedUserId={props.authorizedUserId}\n                   />\n      <PostsContainer />\n    </div>\n  )\n});\n\nexport default Profile;","export const selectUserProfile = (state) => {\n  return state.profilePage.profile\n}\n\nexport const getProfileStatus = (state) => {\n  return state.profilePage.status\n}\n\nexport const getAuthorizedUserProfile = (state) => {\n  return state.auth.userId\n}\n\nexport const isUserAuthorized = (state) => {\n  return state.auth.isAuth\n}\n\nexport const getIsFriend = (state) => {\n  return state.profilePage.isFriend\n}\n\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {getUserProfile, getUserStatus, isFriend, updateUserStatus} from \"../../redux/profileReducer\";\nimport {withRouter, Redirect} from \"react-router-dom\";\nimport {withConnectedAuthRedirect} from \"../../hoc/withConnectedAuthRedirect\";\nimport {compose} from \"redux\";\nimport {followUser, unfollowUser} from \"../../redux/usersReducer\";\nimport {updateUserFriends} from \"../../redux/friendsReducer\";\nimport {getFollowingInProgress} from \"../../redux/selectors/usersSelectors\";\nimport {\n  getAuthorizedUserProfile,\n  getProfileStatus,\n  isUserAuthorized,\n  selectUserProfile, getIsFriend\n} from \"../../redux/selectors/profileSelectors\";\n\n//This is class container component for side effects *inner container layer*\nclass ProfileContainer extends React.PureComponent {\n  state = {\n    statusEditable: true\n  }\n\n  statusEditableCheck(userId) {\n    if (userId === this.props.authorizedUserId)  {\n      this.setState({\n        statusEditable: true,\n      })\n    } else {\n      this.setState({\n        statusEditable: false,\n      })\n    }\n  }\n\n  componentDidMount() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        return <Redirect to='/login'/>\n      }\n    }\n    this.props.getUserProfile(userId)\n    this.props.getUserStatus(userId)\n    this.statusEditableCheck(userId)\n    this.props.isFriend(userId)\n  }\n\n//this is render of presentational component *clear component*\n\n  render() {\n    return (<Profile\n      profile={this.props.profile}\n      status={this.props.status}\n      updateUserStatus={this.props.updateUserStatus}\n      statusEditable={this.state.statusEditable}\n      followUser={this.props.followUser}\n      unfollowUser={this.props.unfollowUser}\n      followingInProgress={this.props.followingInProgress}\n      profileIsFriend={this.props.profileIsFriend}\n      authorizedUserId={this.props.authorizedUserId}\n    />)\n  }\n}\n\n//This is react-redux wrapper for store access *outer container layer*\nlet mapStateToProps = (state) => {\n  return ({\n    profile: selectUserProfile(state),\n    status: getProfileStatus(state),\n    authorizedUserId: getAuthorizedUserProfile(state),\n    isAuth: isUserAuthorized(state),\n    profileIsFriend: getIsFriend(state),\n    followingInProgress: getFollowingInProgress(state),\n    friends: state.friendsPage.friends\n  });\n}\n\nexport default compose(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getUserStatus,\n    updateUserStatus,\n    isFriend,\n    updateUserFriends,\n    followUser,\n    unfollowUser,\n  }),\n  withRouter,\n  withConnectedAuthRedirect\n)(ProfileContainer);"],"sourceRoot":""}